/#
@summary Compute the square root of an `Integer` or `Float` value using the Newton-Raphson method.
@param x The value for which to compute the square root. It must be either an `Integer` or a `Float`.
@return A `Float` containing the square root of `x`.
@throws "Not a number" if `x` is not an `Integer` or `Float`.
#/
fn sqrt(x)
  # guard clause to only accept ints and floats.
  throw "Not a number" when ![Integer, Float].contains(x.type())

  # the square root and epsilon
  z = 1.0
  tolerance = math::eps()

  # Newton-Raphson method to approximate the square root
  while true do
    nextZ = z - (z * z - x) / (2 * z)
    break when math::abs(z - nextZ) < tolerance
    z = nextZ
  end

  return z
end

# Example usage: Compute and print the square root of numbers from 1 to 100
repeat 100 as n do
  println "sqrt(${n}) = ${sqrt(n)}"
end
